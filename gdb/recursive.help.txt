
Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-as-accelerator-for=ARG
                          build as offload target compiler. Specify offload
                          host triple by ARG
  --enable-offload-targets=LIST
                          enable offloading to devices from comma-separated
                          LIST of TARGET[=DIR]. Use optional path to find
                          offload target compiler during the build
  --enable-offload-defaulted
		If enabled, configured but not installed offload compilers and
		libgomp plugins are silently ignored.  Useful for distribution
		compilers where those are in separate optional packages.

  --enable-gold[=ARG]     build gold [ARG={default,yes,no}]
  --enable-ld[=ARG]       build ld [ARG={default,yes,no}]
  --enable-gprofng[=ARG]  build gprofng [ARG={yes,no}]
  --enable-compressed-debug-sections={all,gas,gold,ld,none}
                          Enable compressed debug sections for gas, gold or ld
                          by default
  --enable-default-compressed-debug-sections-algorithm={zlib,zstd}
                          Default compression algorithm for
                          --enable-compressed-debug-sections.
  --enable-year2038       enable support for timestamps past the year 2038
  --disable-libquadmath   do not build libquadmath directory
  --disable-libquadmath-support
                          disable libquadmath support for Fortran
  --enable-libada         build libada directory
  --enable-libgm2         build libgm2 directory
  --enable-libssp         build libssp directory
  --disable-libstdcxx     do not build libstdc++-v3 directory
  --enable-bootstrap      enable bootstrapping [yes if native build]
  --enable-pgo-build[=lto]
                          enable the PGO build
  --disable-isl-version-check
                          disable check for isl version
  --enable-lto            enable link time optimization support
  --enable-linker-plugin-configure-flags=FLAGS
                          additional flags for configuring linker plugins
                          [none]
  --enable-linker-plugin-flags=FLAGS
                          additional flags for configuring and building linker
                          plugins [none]
  --enable-host-pie       build position independent host executables
  --enable-host-shared    build host code as shared libraries
  --enable-stage1-languages[=all]
                          choose additional languages to build during stage1.
                          Mostly useful for compiler development
  --enable-objc-gc        enable use of Boehm's garbage collector with the GNU
                          Objective-C runtime
  --enable-vtable-verify  Enable vtable verification feature
  --enable-serial-[{host,target,build}-]configure
                          force sequential configuration of sub-packages for
                          the host, target or build machine, or all
                          sub-packages
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-stage1-checking[=all]
                          choose additional checking for stage1 of the
                          compiler
  --enable-werror         enable -Werror in bootstrap stage2 and later

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-build-libsubdir=DIR  Directory where to find libraries for build system
  --with-system-zlib      use installed libz
  --with-zstd             Support zstd compressed debug sections
                          (default=auto)
  --with-mpc=PATH         specify prefix directory for installed MPC package.
                          Equivalent to --with-mpc-include=PATH/include plus
                          --with-mpc-lib=PATH/lib
  --with-mpc-include=PATH specify directory for installed MPC include files
  --with-mpc-lib=PATH     specify directory for the installed MPC library
  --with-mpfr=PATH        specify prefix directory for installed MPFR package.
                          Equivalent to --with-mpfr-include=PATH/include plus
                          --with-mpfr-lib=PATH/lib
  --with-mpfr-include=PATH
                          specify directory for installed MPFR include files
  --with-mpfr-lib=PATH    specify directory for the installed MPFR library
  --with-gmp=PATH         specify prefix directory for the installed GMP
                          package. Equivalent to
                          --with-gmp-include=PATH/include plus
                          --with-gmp-lib=PATH/lib
  --with-gmp-include=PATH specify directory for installed GMP include files
  --with-gmp-lib=PATH     specify directory for the installed GMP library
  --with-stage1-libs=LIBS libraries for stage1
  --with-static-standard-libraries
                          use -static-libstdc++ and -static-libgcc
                          (default=auto)
  --with-stage1-ldflags=FLAGS
                          linker flags for stage1
  --with-boot-libs=LIBS   libraries for stage2 and later
  --with-boot-ldflags=FLAGS
                          linker flags for stage2 and later
  --with-isl=PATH         Specify prefix directory for the installed isl
                          package. Equivalent to
                          --with-isl-include=PATH/include plus
                          --with-isl-lib=PATH/lib
  --with-isl-include=PATH Specify directory for installed isl include files
  --with-isl-lib=PATH     Specify the directory for the installed isl library
  --with-target-bdw-gc=PATHLIST
                          specify prefix directory for installed bdw-gc
                          package. Equivalent to
                          --with-target-bdw-gc-include=PATH/include plus
                          --with-target-bdw-gc-lib=PATH/lib
  --with-target-bdw-gc-include=PATHLIST
                          specify directories for installed bdw-gc include
                          files
  --with-target-bdw-gc-lib=PATHLIST
                          specify directories for installed bdw-gc library
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths
  --with-build-sysroot=SYSROOT
                          use sysroot as the system root during the build
  --with-debug-prefix-map='A=B C=D ...'
                          map A to B, C to D ... in debug information
  --with-build-config='NAME NAME2...'
                          use config/NAME.mk build configuration
  --with-build-time-tools=PATH
                          use given path to find target tools during the build

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  build_configargs
              additional configure arguments for build directories
  host_configargs
              additional configure arguments for host directories
  target_configargs
              additional configure arguments for target directories
  AR          AR for the host
  AS          AS for the host
  DLLTOOL     DLLTOOL for the host
  DSYMUTIL    DSYMUTIL for the host
  LD          LD for the host
  LIPO        LIPO for the host
  NM          NM for the host
  RANLIB      RANLIB for the host
  STRIP       STRIP for the host
  WINDRES     WINDRES for the host
  WINDMC      WINDMC for the host
  OBJCOPY     OBJCOPY for the host
  OBJDUMP     OBJDUMP for the host
  OTOOL       OTOOL for the host
  READELF     READELF for the host
  CC_FOR_TARGET
              CC for the target
  CXX_FOR_TARGET
              CXX for the target
  GCC_FOR_TARGET
              GCC for the target
  GFORTRAN_FOR_TARGET
              GFORTRAN for the target
  GOC_FOR_TARGET
              GOC for the target
  GDC_FOR_TARGET
              GDC for the target
  GM2_FOR_TARGET
              GM2 for the target
  AR_FOR_TARGET
              AR for the target
  AS_FOR_TARGET
              AS for the target
  DLLTOOL_FOR_TARGET
              DLLTOOL for the target
  DSYMUTIL_FOR_TARGET
              DSYMUTIL for the target
  LD_FOR_TARGET
              LD for the target
  LIPO_FOR_TARGET
              LIPO for the target
  NM_FOR_TARGET
              NM for the target
  OBJCOPY_FOR_TARGET
              OBJCOPY for the target
  OBJDUMP_FOR_TARGET
              OBJDUMP for the target
  OTOOL_FOR_TARGET
              OTOOL for the target
  RANLIB_FOR_TARGET
              RANLIB for the target
  READELF_FOR_TARGET
              READELF for the target
  STRIP_FOR_TARGET
              STRIP for the target
  WINDRES_FOR_TARGET
              WINDRES for the target
  WINDMC_FOR_TARGET
              WINDMC for the target

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of GNU Autoconf 2.69:

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-lispdir          override the default lisp directory

Some influential environment variables:
  M4          Location of GNU M4 1.4.6 or later. Defaults to the first program
              of `m4', `gm4', or `gnum4' on PATH that meets Autoconf needs.
  EMACS       the Emacs editor command
  EMACSLOADPATH
              the Emacs library search path

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <bug-autoconf@gnu.org>.
GNU Autoconf home page: <http://www.gnu.org/software/autoconf/>.
General help using GNU software: <http://www.gnu.org/gethelp/>.

Configuration of GNU Automake 1.15:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")

Some influential environment variables:
  AM_TEST_RUNNER_SHELL
              a sturdy POSIX shell for our testsuite
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  FC          Fortran compiler command
  FCFLAGS     Fortran compiler flags
  F77         Fortran 77 compiler command
  FFLAGS      Fortran 77 compiler flags
  GNU_CC      GNU C compiler
  GNU_CFLAGS  GNU C compiler flags
  GNU_CXX     GNU C++ compiler
  GNU_CXXFLAGS
              GNU C++ compiler flags
  GNU_FC      GNU Fortran compiler
  GNU_FCFLAGS GNU Fortran compiler flags
  GNU_F77     GNU Fortran 77 compiler
  GNU_FFLAGS  GNU Fortran 77 compiler flags
  GNU_GCJ     GNU Java compiler
  GNU_GCJFLAGS
              GNU Java compiler flags

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <bug-automake@gnu.org>.
GNU Automake home page: <http://www.gnu.org/software/automake/>.
General help using GNU software: <http://www.gnu.org/gethelp/>.

Configuration of bfd 2.41.50:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-shared[=PKGS]  build shared libraries [default=no]
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-plugins        Enable support for plugins
  --disable-largefile     omit support for large files
  --enable-checking       enable run-time checks
  --enable-64-bit-bfd     64-bit support (on hosts with narrower word sizes)
  --enable-targets        alternative target configurations
  --enable-64-bit-archive force 64-bit archives
  --enable-secureplt      Default to creating read-only plt entries
  --enable-separate-code  enable -z separate-code in ELF linker by default
  --enable-leading-mingw64-underscores
                          Enable leading underscores on 64 bit mingw targets
  --enable-werror         treat compile warnings as errors
  --enable-build-warnings enable build-time compiler warnings
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-install-libbfd controls installation of libbfd and related headers
  --disable-nls           do not use Native Language Support

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-mmap             try using mmap for BFD input files if available
  --with-separate-debug-dir=DIR
                          Look for global separate debug info in DIR
                          [[default=LIBDIR/debug]]
  --with-pkgversion=PKG   Use PKG in the version string in place of "GNU
                          Binutils"
  --with-bugurl=URL       Direct users to URL to report a bug
  --with-system-zlib      use installed libz
  --with-zstd             support zstd compressed debug sections
                          (default=auto)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  ZSTD_CFLAGS C compiler flags for ZSTD, overriding pkg-config
  ZSTD_LIBS   linker flags for ZSTD, overriding pkg-config

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of binutils 2.41.50:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-plugins        Enable support for plugins
  --disable-largefile     omit support for large files
  --enable-checking       enable run-time checks
  --enable-targets        alternative target configurations
  --enable-deterministic-archives
                          ar and ranlib default to -D behavior
  --disable-default-strings-all
                          strings defaults to --data behavior
  --enable-f-for-ifunc-symbols
                          Have nm use F and f for global and local ifunc
                          symbols
  --enable-follow-debug-links
                          Have readelf and objdump follow debug links by
                          default
  --enable-colored-disassembly
                          Have objdump use colors in its disassembly by
                          default
  --enable-libctf         Handle .ctf type-info sections [default=yes]
  --enable-werror         treat compile warnings as errors
  --enable-build-warnings enable build-time compiler warnings
  --disable-nls           do not use Native Language Support
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --disable-rpath         do not hardcode runtime library paths

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-debuginfod       Enable debuginfo lookups with debuginfod
                          (auto/yes/no)
  --with-system-zlib      use installed libz
  --with-zstd             support zstd compressed debug sections
                          (default=auto)
  --with-msgpack          Enable msgpack support (auto/yes/no)
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-libiconv-type=TYPE     type of library to search for (auto/static/shared)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  DEBUGINFOD_CFLAGS
              C compiler flags for DEBUGINFOD, overriding pkg-config
  DEBUGINFOD_LIBS
              linker flags for DEBUGINFOD, overriding pkg-config
  YACC        The `Yet Another Compiler Compiler' implementation to use.
              Defaults to the first program found out of: `bison -y', `byacc',
              `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  ZSTD_CFLAGS C compiler flags for ZSTD, overriding pkg-config
  ZSTD_LIBS   linker flags for ZSTD, overriding pkg-config
  MSGPACK_CFLAGS
              C compiler flags for MSGPACK, overriding pkg-config
  MSGPACK_LIBS
              linker flags for MSGPACK, overriding pkg-config

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of GNU DejaGnu 1.5.3:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <bug-dejagnu@gnu.org>.
GNU DejaGnu home page: <http://www.gnu.org/software/dejagnu/>.
General help using GNU software: <http://www.gnu.org/gethelp/>.

Configuration of etc 0:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")

Report bugs to the package provider.

Configuration of gas 2.41.50:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-plugins        Enable support for plugins
  --disable-largefile     omit support for large files
  --enable-targets        alternative target configurations besides the primary
  --enable-checking       enable run-time checks
  --enable-compressed-debug-sections={all,gas,none}
                          compress debug sections by default
  --enable-default-compressed-debug-sections-algorithm={zlib,zstd}
                          Default compression algorithm for
                          --enable-compressed-debug-sections.
  --enable-x86-relax-relocations
                          generate x86 relax relocations by default
  --enable-elf-stt-common generate ELF common symbols with STT_COMMON type by
                          default
  --enable-generate-build-notes
                          generate GNU Build notes if none are provided by the
                          input
  --enable-mips-fix-loongson3-llsc
                          enable MIPS fix Loongson3 LLSC errata
  --enable-x86-used-note  generate GNU x86 used ISA and feature properties
  --enable-default-riscv-attribute
                          generate RISC-V arch attribute by default
  --enable-werror         treat compile warnings as errors
  --enable-build-warnings enable build-time compiler warnings
  --disable-nls           do not use Native Language Support
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-cpu=CPU          default cpu variant is CPU (currently only supported
                          on ARC)
  --with-system-zlib      use installed libz
  --with-zstd             support zstd compressed debug sections
                          (default=auto)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  YACC        The `Yet Another Compiler Compiler' implementation to use.
              Defaults to the first program found out of: `bison -y', `byacc',
              `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  ZSTD_CFLAGS C compiler flags for ZSTD, overriding pkg-config
  ZSTD_LIBS   linker flags for ZSTD, overriding pkg-config

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-as-accelerator-for=ARG
                          build as offload target compiler. Specify offload
                          host triple by ARG
  --enable-offload-targets=LIST
                          enable offloading to devices from comma-separated
                          LIST of TARGET[=DIR]. Use optional path to find
                          offload target compiler during the build
  --enable-offload-defaulted
		If enabled, configured but not installed offload compilers and
		libgomp plugins are silently ignored.  Useful for distribution
		compilers where those are in separate optional packages.

  --enable-gold[=ARG]     build gold [ARG={default,yes,no}]
  --enable-ld[=ARG]       build ld [ARG={default,yes,no}]
  --enable-compressed-debug-sections={all,gas,gold,ld,none}
                          Enable compressed debug sections for gas, gold or ld
                          by default
  --disable-libquadmath   do not build libquadmath directory
  --disable-libquadmath-support
                          disable libquadmath support for Fortran
  --enable-libada         build libada directory
  --enable-libgm2         build libgm2 directory
  --enable-libssp         build libssp directory
  --disable-libstdcxx     do not build libstdc++-v3 directory
  --enable-bootstrap      enable bootstrapping [yes if native build]
  --enable-pgo-build[=lto]
                          enable the PGO build
  --disable-isl-version-check
                          disable check for isl version
  --enable-lto            enable link time optimization support
  --enable-linker-plugin-configure-flags=FLAGS
                          additional flags for configuring linker plugins
                          [none]
  --enable-linker-plugin-flags=FLAGS
                          additional flags for configuring and building linker
                          plugins [none]
  --enable-host-shared    build host code as shared libraries
  --enable-stage1-languages[=all]
                          choose additional languages to build during stage1.
                          Mostly useful for compiler development
  --enable-objc-gc        enable use of Boehm's garbage collector with the GNU
                          Objective-C runtime
  --enable-vtable-verify  Enable vtable verification feature
  --enable-serial-[{host,target,build}-]configure
                          force sequential configuration of sub-packages for
                          the host, target or build machine, or all
                          sub-packages
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-stage1-checking[=all]
                          choose additional checking for stage1 of the
                          compiler
  --enable-werror         enable -Werror in bootstrap stage2 and later

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-build-libsubdir=DIR  Directory where to find libraries for build system
  --with-system-zlib      use installed libz
  --with-mpc=PATH         specify prefix directory for installed MPC package.
                          Equivalent to --with-mpc-include=PATH/include plus
                          --with-mpc-lib=PATH/lib
  --with-mpc-include=PATH specify directory for installed MPC include files
  --with-mpc-lib=PATH     specify directory for the installed MPC library
  --with-mpfr=PATH        specify prefix directory for installed MPFR package.
                          Equivalent to --with-mpfr-include=PATH/include plus
                          --with-mpfr-lib=PATH/lib
  --with-mpfr-include=PATH
                          specify directory for installed MPFR include files
  --with-mpfr-lib=PATH    specify directory for the installed MPFR library
  --with-gmp=PATH         specify prefix directory for the installed GMP
                          package. Equivalent to
                          --with-gmp-include=PATH/include plus
                          --with-gmp-lib=PATH/lib
  --with-gmp-include=PATH specify directory for installed GMP include files
  --with-gmp-lib=PATH     specify directory for the installed GMP library
  --with-stage1-libs=LIBS libraries for stage1
  --with-static-standard-libraries
                          use -static-libstdc++ and -static-libgcc
                          (default=auto)
  --with-stage1-ldflags=FLAGS
                          linker flags for stage1
  --with-boot-libs=LIBS   libraries for stage2 and later
  --with-boot-ldflags=FLAGS
                          linker flags for stage2 and later
  --with-isl=PATH         Specify prefix directory for the installed isl
                          package. Equivalent to
                          --with-isl-include=PATH/include plus
                          --with-isl-lib=PATH/lib
  --with-isl-include=PATH Specify directory for installed isl include files
  --with-isl-lib=PATH     Specify the directory for the installed isl library
  --with-target-bdw-gc=PATHLIST
                          specify prefix directory for installed bdw-gc
                          package. Equivalent to
                          --with-target-bdw-gc-include=PATH/include plus
                          --with-target-bdw-gc-lib=PATH/lib
  --with-target-bdw-gc-include=PATHLIST
                          specify directories for installed bdw-gc include
                          files
  --with-target-bdw-gc-lib=PATHLIST
                          specify directories for installed bdw-gc library
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths
  --with-build-sysroot=SYSROOT
                          use sysroot as the system root during the build
  --with-debug-prefix-map='A=B C=D ...'
                          map A to B, C to D ... in debug information
  --with-build-config='NAME NAME2...'
                          use config/NAME.mk build configuration
  --with-build-time-tools=PATH
                          use given path to find target tools during the build

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  build_configargs
              additional configure arguments for build directories
  host_configargs
              additional configure arguments for host directories
  target_configargs
              additional configure arguments for target directories
  AR          AR for the host
  AS          AS for the host
  DLLTOOL     DLLTOOL for the host
  DSYMUTIL    DSYMUTIL for the host
  LD          LD for the host
  LIPO        LIPO for the host
  NM          NM for the host
  RANLIB      RANLIB for the host
  STRIP       STRIP for the host
  WINDRES     WINDRES for the host
  WINDMC      WINDMC for the host
  OBJCOPY     OBJCOPY for the host
  OBJDUMP     OBJDUMP for the host
  OTOOL       OTOOL for the host
  READELF     READELF for the host
  CC_FOR_TARGET
              CC for the target
  CXX_FOR_TARGET
              CXX for the target
  GCC_FOR_TARGET
              GCC for the target
  GFORTRAN_FOR_TARGET
              GFORTRAN for the target
  GOC_FOR_TARGET
              GOC for the target
  GDC_FOR_TARGET
              GDC for the target
  GM2_FOR_TARGET
              GM2 for the target
  AR_FOR_TARGET
              AR for the target
  AS_FOR_TARGET
              AS for the target
  DLLTOOL_FOR_TARGET
              DLLTOOL for the target
  DSYMUTIL_FOR_TARGET
              DSYMUTIL for the target
  LD_FOR_TARGET
              LD for the target
  LIPO_FOR_TARGET
              LIPO for the target
  NM_FOR_TARGET
              NM for the target
  OBJCOPY_FOR_TARGET
              OBJCOPY for the target
  OBJDUMP_FOR_TARGET
              OBJDUMP for the target
  OTOOL_FOR_TARGET
              OTOOL for the target
  RANLIB_FOR_TARGET
              RANLIB for the target
  READELF_FOR_TARGET
              READELF for the target
  STRIP_FOR_TARGET
              STRIP for the target
  WINDRES_FOR_TARGET
              WINDRES for the target
  WINDMC_FOR_TARGET
              WINDMC for the target

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-c++-tools      build auxiliary c++ tools
  --enable-maintainer-mode
                          enable maintainer mode. Add rules to rebuild
                          configurey bits
  --enable-checking[=LIST]
                          enable expensive run-time checks. With LIST, enable
                          only specific categories of checks. Categories are:
                          yes,no,all,none,release.
  --enable-default-pie    enable Position Independent Executable as default

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of fixincludes  :

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-werror-always  enable -Werror despite compiler version
  --enable-twoprocess       Use a separate process to apply the fixes
  --enable-maintainer-mode enable make rules and dependencies not useful
                          (and sometimes confusing) to the casual installer

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-local-prefix=DIR specifies directory to put local include
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-generated-files-in-srcdir
                          put copies of generated files in source dir intended
                          for creating source tarballs for users without
                          texinfo bison or flex
  --disable-largefile     omit support for large files
  --disable-build-format-warnings
                          don't use -Wformat while building GCC
  --enable-werror-always  enable -Werror despite compiler version
  --enable-checking[=LIST]
                          enable expensive run-time checks. With LIST, enable
                          only specific categories of checks. Categories are:
                          yes,no,all,none,release. Flags are:
                          assert,df,extra,fold,gc,gcac,gimple,misc,
                          rtlflag,rtl,runtime,tree,valgrind,types
  --enable-coverage[=LEVEL]
                          enable compiler's code coverage collection. Use to
                          measure compiler performance and locate unused parts
                          of the compiler. With LEVEL, specify optimization.
                          Values are opt, noopt, default is noopt
  --enable-gather-detailed-mem-stats
                          enable detailed memory allocation stats gathering
  --enable-valgrind-annotations
                          enable valgrind runtime interaction
  --enable-multilib       enable library support for multiple ABIs
  --enable-multiarch      enable support for multiarch paths
  --enable-__cxa_atexit   enable __cxa_atexit for C++
  --enable-decimal-float={no,yes,bid,dpd}
			enable decimal float extension to C.  Selecting 'bid'
			or 'dpd' choses which decimal floating point format
			to use
  --enable-fixed-point    enable fixed-point arithmetic extension to C
  --enable-threads[=LIB]  enable thread usage for target GCC, using LIB thread
                          package
  --enable-tls            enable or disable generation of tls code overriding
                          the assembler check for tls support
  --enable-vtable-verify  enable vtable verification feature
  --disable-analyzer      disable -fanalyzer static analyzer
  --enable-objc-gc        enable the use of Boehm's garbage collector with the
                          GNU Objective-C runtime
  --disable-shared        don't provide a shared libgcc
  --disable-gcov          don't provide libgcov and related host tools
  --enable-languages=LIST specify which front-ends to build
  --disable-rpath         do not hardcode runtime library paths
  --enable-sjlj-exceptions
                          arrange to use setjmp/longjmp exception handling
  --enable-secureplt      enable -msecure-plt by default for PowerPC
  --enable-mingw-wildcard Set whether to expand wildcard on command-line.
                          Default to platform configuration
  --enable-large-address-aware
                          Link mingw executables with --large-address-aware
  --enable-leading-mingw64-underscores
                          enable leading underscores on 64 bit mingw targets
  --enable-cld            enable -mcld by default for 32bit x86
  --enable-frame-pointer  enable -fno-omit-frame-pointer by default for x86
  --disable-win32-registry
                          disable lookup of installation paths in the Registry
                          on Windows hosts
  --enable-win32-registry enable registry lookup (default)
  --enable-win32-registry=KEY
                          use KEY instead of GCC version as the last portion
                          of the registry key
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-ld[=ARG]       build ld [ARG={default,yes,no}]
  --enable-gold[=ARG]     build gold [ARG={default,yes,no}]
  --enable-gnu-indirect-function
                          enable the use of the @gnu_indirect_function to
                          glibc systems
  --enable-initfini-array	use .init_array/.fini_array sections
  --enable-comdat         enable COMDAT group support
  --enable-newlib-nano-formatted-io
                          Use nano version formatted IO

  --enable-standard-branch-protection
                          enable Branch Target Identification Mechanism and
                          Return Address Signing by default for AArch64
  --disable-standard-branch-protection
                          disable Branch Target Identification Mechanism and
                          Return Address Signing by default for AArch64


  --enable-fix-cortex-a53-835769
                          enable workaround for AArch64 Cortex-A53 erratum
                          835769 by default
  --disable-fix-cortex-a53-835769
                          disable workaround for AArch64 Cortex-A53 erratum
                          835769 by default


  --enable-fix-cortex-a53-843419
                          enable workaround for AArch64 Cortex-A53 erratum
                          843419 by default
  --disable-fix-cortex-a53-843419
                          disable workaround for AArch64 Cortex-A53 erratum
                          843419 by default

  --enable-gnu-unique-object
                          enable the use of the @gnu_unique_object ELF
                          extension on glibc systems
  --enable-linker-build-id
                          compiler will always pass --build-id to linker
  --enable-libssp         enable linking against libssp
  --enable-default-ssp    enable Stack Smashing Protection as default
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-link-mutex     avoid linking multiple front-ends at once to avoid
                          thrashing on the build machine
  --enable-link-serialization
                          avoid linking multiple GCC front-ends at once using
                          make dependencies to avoid thrashing on the build
                          machine
  --enable-version-specific-runtime-libs
                          specify that runtime libraries should be installed
                          in a compiler-specific directory
  --enable-plugin         enable plugin support
  --enable-host-shared    build host code as shared libraries
  --disable-libquadmath-support
                          disable libquadmath support for Fortran
  --enable-default-pie    enable Position Independent Executable as default
  --enable-cet            enable Intel CET in host libraries [default=auto]
  --enable-s390-excess-float-precision
                          on s390 targets, evaluate float with double
                          precision when in standards-conforming mode

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-build-libsubdir=DIR  Directory where to find libraries for build system
  --with-local-prefix=DIR specifies directory to put local include
  --with-native-system-header-dir=dir
                          use dir as the directory to look for standard
                          system header files in.  Defaults to /usr/include.
  --with-build-sysroot=sysroot
                          use sysroot as the system root during the build
  --with-sysroot[=DIR]    search for usr/lib, usr/include, et al, within DIR
  --with-gxx-include-dir=DIR
                          specifies directory to put g++ header files
  --with-gxx-libcxx-include-dir=DIR
                          specifies directory to find libc++ header files
  --with-cpp-install-dir=DIR
                          install the user visible C preprocessor in DIR
                          (relative to PREFIX) as well as PREFIX/bin
  --with-gnu-ld           arrange to work with GNU ld
  --with-ld               arrange to use the specified ld (full pathname)
  --with-demangler-in-ld  try to use demangler in GNU ld
  --with-dsymutil         arrange to use the specified dsymutil (full
                          pathname)
  --with-gnu-as           arrange to work with GNU as
  --with-as               arrange to use the specified as (full pathname)
  --with-stack-clash-protection-guard-size=size
                          Set the default stack clash protection guard size
                          for specific targets as a power of two in bytes.
  --with-dwarf2           force the default debug format to be DWARF 2 (or
                          later)
  --with-specs=SPECS      add SPECS to driver command-line processing
  --with-pkgversion=PKG   Use PKG in the version string in place of "GCC"
  --with-bugurl=URL       Direct users to URL to report a bug
  --with-documentation-root-url=URL
                          Root for documentation URLs
  --with-changes-root-url=URL
                          Root for GCC changes URLs
  --with-multilib-list    select multilibs (AArch64, ARM, AVR, OR1K, RISC-V,
                          SH and x86-64 only)
  --with-multilib-generator
                          Multi-libs configuration string (RISC-V only)
  --with-zstd=PATH        specify prefix directory for installed zstd library.
                          Equivalent to --with-zstd-include=PATH/include plus
                          --with-zstd-lib=PATH/lib
  --with-zstd-include=PATH
                          specify directory for installed zstd include files
  --with-zstd-lib=PATH    specify directory for the installed zstd library
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-libiconv-type=TYPE     type of library to search for (auto/static/shared)
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-plugin-ld=[ARG]  specify the plugin linker
  --with-glibc-version=M.N
                          assume GCC used with glibc version M.N or later
  --with-long-double-128  use 128-bit long double by default
  --with-long-double-format={ieee,ibm}
		  Specify whether PowerPC long double uses IEEE or IBM format

  --with-gc={page,zone}   this option is not supported anymore. It used to
                          choose the garbage collection mechanism to use with
                          the compiler
  --with-system-zlib      use installed libz
  --with-linker-hash-style={sysv,gnu,both}
                          specify the linker hash style
  --with-diagnostics-color={never,auto,auto-if-env,always}
                          specify the default of -fdiagnostics-color option
                          auto-if-env stands for -fdiagnostics-color=auto if
                          GCC_COLOR environment variable is present and
                          -fdiagnostics-color=never otherwise
  --with-diagnostics-urls={never,auto,auto-if-env,always}
                          specify the default of -fdiagnostics-urls option
                          auto-if-env stands for -fdiagnostics-urls=auto if
                          GCC_URLS or TERM_URLS environment variable is
                          present and -fdiagnostics-urls=never otherwise

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  CPP         C preprocessor
  GMPLIBS     How to link GMP
  GMPINC      How to find GMP include files
  ISLLIBS     How to link isl
  ISLINC      How to find isl include files

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of package-unused version-unused:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  GOC         Go compiler command
  GOFLAGS     Go compiler flags

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-nls           do not use Native Language Support
  --disable-rpath         do not hardcode runtime library paths
  --enable-maintainer-mode enable rules only needed by maintainers
  --enable-host-shared    build host code as shared libraries

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-libiconv-type=TYPE     type of library to search for (auto/static/shared)
  --with-included-gettext use the GNU gettext library included here
  --with-libintl-prefix[=DIR]  search for libintl in DIR/include and DIR/lib
  --without-libintl-prefix     don't search for libintl in includedir and libdir
  --with-libintl-type=TYPE     type of library to search for (auto/static/shared)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-version-specific-runtime-libs
                          specify that runtime libraries should be installed
                          in a compiler-specific directory
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-multilib       build many library versions (default)
  --disable-shared        don't provide a shared libgnat

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-build-libsubdir=DIR  Directory where to find libraries for build system
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-system-libunwind use installed libunwind
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of GNU Atomic Library 1.0:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-version-specific-runtime-libs
                          Specify that runtime libraries should be installed
                          in a compiler-specific directory [default=no]
  --enable-generated-files-in-srcdir
                          put copies of generated files in source dir intended
                          for creating source tarballs for users without
                          texinfo bison or flex. [default=no]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-multilib       build many library versions (default)
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-symvers=STYLE  enables symbol versioning of the shared library
                          [default=yes]
  --disable-werror        disable building with -Werror
  --enable-cet            enable Intel CET in target libraries [default=auto]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.
GNU Atomic Library home page: <http://www.gnu.org/software/libatomic/>.
General help using GNU software: <http://www.gnu.org/gethelp/>.

Configuration of package-unused version-unused:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-largefile     omit support for large files
  --enable-cet            enable Intel CET in target libraries [default=auto]
  --disable-werror        disable building with -Werror
  --enable-host-shared    build host code as shared libraries
  --enable-cet            enable Intel CET in host libraries [default=auto]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-target-subdir=SUBDIR      Configuring in a subdirectory for target
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-system-libunwind use installed libunwind

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  OBJCOPY     location of objcopy
  DSYMUTIL    location of dsymutil
  NM          location of nm

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of libcc1 version-unused:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-static[=PKGS]  build static libraries [default=no]
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-cet            enable Intel CET in host libraries [default=auto]
  --enable-werror-always  enable -Werror despite compiler version
  --enable-plugin         enable plugin support

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-build-libsubdir=DIR  Directory where to find libraries for build system
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  GMPINC      How to find GMP include files

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of codylib 0.0:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-maintainer-mode
                          enable maintainer mode. Add rules to rebuild
                          configurey bits
  --enable-checking[=LIST]
                          enable expensive run-time checks. With LIST, enable
                          only specific categories of checks. Categories are:
                          yes,no,all,none,release. Flags are: misc,valgrind or
                          other strings
  --enable-host-shared    build host code as shared libraries
  --enable-exceptions     enable exceptions & rtti

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-compiler=NAME    which compiler to use

Some influential environment variables:
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <github.com/urnathan/libcody>.

Configuration of cpplib  :

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-largefile     omit support for large files
  --enable-werror-always  enable -Werror despite compiler version
  --disable-rpath         do not hardcode runtime library paths
  --enable-maintainer-mode enable rules only needed by maintainers
  --enable-checking[=LIST]
                          enable expensive run-time checks. With LIST, enable
                          only specific categories of checks. Categories are:
                          yes,no,all,none,release. Flags are: misc,valgrind or
                          other strings
  --enable-canonical-system-headers
                          enable or disable system headers canonicalization
  --enable-host-shared    build host code as shared libraries
  --enable-cet            enable Intel CET in host libraries [default=auto]
  --enable-valgrind-annotations
                          enable valgrind runtime interaction

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-libiconv-type=TYPE     type of library to search for (auto/static/shared)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <gcc-bugs@gcc.gnu.org>.

Configuration of libdecnumber  :

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-werror-always  enable -Werror despite compiler version
  --enable-maintainer-mode enable rules only needed by maintainers
  --enable-decimal-float={no,yes,bid,dpd}
			enable decimal float extension to C.  Selecting 'bid'
			or 'dpd' choses which decimal floating point format
			to use
  --enable-host-shared    build host code as shared libraries
  --enable-cet            enable Intel CET in host libraries [default=auto]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <gcc-bugs@gcc.gnu.org>.

Configuration of libffi 3.4.2:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-generated-files-in-srcdir
                          put copies of generated files in source dir intended
                          for creating source tarballs for users without
                          texinfo bison or flex
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-cet            enable Intel CET in target libraries [default=auto]
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-pax_emutramp       enable pax emulated trampolines, for we can't use PROT_EXEC
  --enable-debug          debugging mode
  --disable-structs       omit code for struct support
  --disable-raw-api       make the raw api unavailable
  --enable-exec-static-tramp  enable use of static exec trampolines
  --enable-purify-safety  purify-safe mode
  --enable-symvers=STYLE  enables symbol versioning of the shared library
                          [default=yes]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  CPP         C preprocessor
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <http://github.com/libffi/libffi/issues>.

Configuration of GNU C Runtime Library 1.0:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-shared        don't provide a shared libgcc
  --enable-vtable-verify    Enable vtable verification feature
  --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --disable-gcov          don't provide libgcov and related host tools
  --disable-largefile     omit support for large files
  --enable-decimal-float={no,yes,bid,dpd}
			enable decimal float extension to C.  Selecting 'bid'
			or 'dpd' choses which decimal floating point format
			to use
  --enable-cet            enable Intel CET in target libraries [default=auto]
  --enable-explicit-exception-frame-registration
                          register exception tables explicitly at module
                          start, for use e.g. for compatibility with
                          installations without PT_GNU_EH_FRAME support
  --disable-tm-clone-registry    disable TM clone registry
  --enable-tls            Use thread-local storage [default=yes]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-target-subdir=SUBDIR      Configuring in a subdirectory for target
  --with-cross-host=HOST           Configuring with a cross compiler
  --with-ld               arrange to use the specified ld (full pathname)
  --with-aix-soname=aix|svr4|both
                          shared library versioning (aka "SONAME") variant to
                          provide on AIX
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-slibdir=DIR      shared libraries in DIR LIBDIR
  --with-build-libsubdir=DIR  Directory where to find libraries for build system
  --with-system-libunwind use installed libunwind
  --with-glibc-version=M.N
                          assume GCC used with glibc version M.N or later
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.
GNU C Runtime Library home page: <http://www.gnu.org/software/libgcc/>.
General help using GNU software: <http://www.gnu.org/gethelp/>.

Configuration of GNU Fortran Runtime Library 0.3:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-version-specific-runtime-libs
                          specify that runtime libraries should be installed
                          in a compiler-specific directory
  --enable-intermodule    build the library in one step
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-multilib       build many library versions (default)
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-cet            enable Intel CET in target libraries [default=auto]
  --disable-symvers       disable symbol versioning for libgfortran
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-largefile     omit support for large files
  --disable-libquadmath-support
                          disable libquadmath support for Fortran

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-build-libsubdir=DIR  Directory where to find libraries for build system
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  FC          Fortran compiler command
  FCFLAGS     Fortran compiler flags

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.
GNU Fortran Runtime Library home page: <http://www.gnu.org/software/libgfortran/>.
General help using GNU software: <http://www.gnu.org/gethelp/>.

Configuration of package-unused version-unused:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-cross-host=HOST           Configuring with a cross compiler
  --with-build-libsubdir=DIR  Directory where to find libraries for build system
  --with-slibdir=DIR      shared libraries in DIR LIBDIR
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of package-unused version-unused:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-werror        disable building with -Werror
  --enable-version-specific-runtime-libs
                          Specify that runtime libraries should be installed
                          in a compiler-specific directory

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --without-libffi        don't use libffi
  --without-libatomic     don't use libatomic
  --with-system-libunwind use installed libunwind

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  GOC         Go compiler command
  GOFLAGS     Go compiler flags
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of GNU Offloading and Multi Processing Runtime Library 1.0:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-version-specific-runtime-libs
                          Specify that runtime libraries should be installed
                          in a compiler-specific directory [default=no]
  --enable-generated-files-in-srcdir
                          put copies of generated files in source dir intended
                          for creating source tarballs for users without
                          texinfo bison or flex. [default=no]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-multilib       build many library versions (default)
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --disable-werror        disable building with -Werror
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-linux-futex    use the Linux futex system call [default=default]
  --enable-tls            Use thread-local storage [default=yes]
  --enable-symvers=STYLE  enables symbol versioning of the shared library
                          [default=yes]
  --enable-cet            enable Intel CET in target libraries [default=auto]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  FC          Fortran compiler command
  FCFLAGS     Fortran compiler flags

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.
GNU Offloading and Multi Processing Runtime Library home page: <http://www.gnu.org/software/libgomp/>.
General help using GNU software: <http://www.gnu.org/gethelp/>.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-maintainer-mode
                          enable make rules and dependencies not useful
                          (and sometimes confusing) to the casual installer
  --enable-multilib       build many library versions (default)
  --enable-install-libiberty       Install headers and library for end users
  --disable-largefile     omit support for large files
  --enable-cet            enable Intel CET in host libraries [default=auto]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-target-subdir=SUBDIR      Configuring in a subdirectory for target
  --with-build-subdir=SUBDIR       Configuring in a subdirectory for build
  --with-cross-host=HOST           Configuring with a cross compiler
  --with-newlib                    Configuring with newlib

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of GNU TM Runtime Library 1.0:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-version-specific-runtime-libs
                          Specify that runtime libraries should be installed
                          in a compiler-specific directory [default=no]
  --enable-generated-files-in-srcdir
                          put copies of generated files in source dir intended
                          for creating source tarballs for users without
                          texinfo bison or flex. [default=no]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-multilib       build many library versions (default)
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-linux-futex    use the Linux futex system call [default=default]
  --enable-tls            Use thread-local storage [default=yes]
  --enable-symvers=STYLE  enables symbol versioning of the shared library
                          [default=yes]
  --disable-werror        disable building with -Werror
  --enable-cet            enable Intel CET in target libraries [default=auto]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  CPP         C preprocessor
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.
GNU TM Runtime Library home page: <http://www.gnu.org/software/libitm/>.
General help using GNU software: <http://www.gnu.org/gethelp/>.

Configuration of package-unused version-unused:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory
  --enable-multilib       build many library versions (default)
  --enable-cet            enable Intel CET in target libraries [default=auto]
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-tls            Use thread-local storage [default=yes]
  --enable-objc-gc        enable use of Boehm's garbage collector with the GNU
                          Objective-C runtime

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-build-libsubdir=DIR  Directory where to find libraries for build system
  --with-target-subdir=SUBDIR
                           configuring in a subdirectory
  --with-cross-host=HOST  configuring with a cross compiler
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-target-bdw-gc=PATHLIST
                          specify prefix directory for installed bdw-gc
                          package. Equivalent to
                          --with-target-bdw-gc-include=PATH/include plus
                          --with-target-bdw-gc-lib=PATH/lib
  --with-target-bdw-gc-include=PATHLIST
                          specify directories for installed bdw-gc include
                          files
  --with-target-bdw-gc-lib=PATHLIST
                          specify directories for installed bdw-gc library
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of package-unused version-unused:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-cet            enable Intel CET in target libraries [default=auto]
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-werror         turns on -Werror [default=no]
  --enable-version-specific-runtime-libs
                          Specify that runtime libraries should be installed
                          in a compiler-specific directory
  --enable-libphobos      Enable libphobos
  --enable-libphobos-checking[=LIST]
                          enable expensive run-time checks. With LIST, enable
                          only specific categories of checks. Categories are:
                          yes,no,all,none,release. Flags are: assert or other
                          strings

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths
  --without-libatomic     Do not use libatomic in core.atomic (default: auto)
  --without-libbacktrace  Do not use libbacktrace in core.runtime (default:
                          auto)
  --with-target-system-zlib={yes,no,auto}
                          use installed libz (default: no)
  --with-cross-host=HOST  configuring with a cross compiler
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-libphobos-druntime-only={yes,no,auto}
                          build only the druntime library (default: auto)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  GDC         D compiler command
  GDCFLAGS    D compiler flags

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of GCC Quad-precision Math Library 0.1:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-version-specific-runtime-libs
                          specify that runtime libraries should be installed
                          in a compiler-specific directory
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --disable-symvers       disable symbol versioning for libquadmath
  --enable-cet            enable Intel CET in target libraries [default=auto]
  --enable-generated-files-in-srcdir
                          put copies of generated files in source dir intended
                          for creating source tarballs for users without
                          texinfo bison or flex

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-bugurl=URL       Direct users to URL to report a bug
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of package-unused version-unused:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-werror        disable building with -Werror
  --enable-cet            enable Intel CET in target libraries [default=auto]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <libsanitizer>.

Configuration of libssp 1.0:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-multilib       build many library versions (default)
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-cet            enable Intel CET in target libraries [default=auto]
  --disable-symvers       disable symbol versioning for libssp
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of package-unused version-unused:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --disable-largefile     omit support for large files
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-hosted-libstdcxx
                          only build freestanding C++ runtime support
  --disable-libstdcxx-hosted
                          alias for --disable-hosted-libstdcxx
  --disable-libstdcxx-verbose
                          disable termination messages to standard error
  --enable-libstdcxx-pch  build pre-compiled libstdc++ headers
                          [default=$is_hosted]
  --enable-cstdio[=PACKAGE]
                          use target-specific I/O package [default=stdio]
  --enable-clocale[=MODEL]
                          use MODEL for target locale package [default=auto]
  --enable-nls            use Native Language Support (default)
  --enable-libstdcxx-allocator[=KIND]
                          use KIND for target std::allocator base
                          [default=auto]
  --enable-cheaders-obsolete
                          allow use of obsolete "C" headers for g++
                          [default=no]
  --enable-cheaders[=KIND]
                          construct "C" headers for g++ [default=$c_model]
  --enable-long-long      enable template specializations for 'long long'
                          [default=yes]
  --enable-wchar_t        enable template specializations for 'wchar_t'
                          [default=yes]
  --enable-c99            turns on ISO/IEC 9899:1999 support [default=yes]
  --enable-concept-checks use Boost-derived template checks [default=no]
  --enable-libstdcxx-debug-flags=FLAGS
                          pass compiler FLAGS when building debug library
                          [default="-g3 -O0 -D_GLIBCXX_ASSERTIONS"]
  --enable-libstdcxx-debug
                          build extra debug library [default=no]
  --enable-cxx-flags=FLAGS
                          pass compiler FLAGS when building library [default=]
  --enable-fully-dynamic-string
                          do not put empty strings in per-process static
                          memory [default=no]
  --enable-extern-template
                          enable extern template [default=yes]
  --enable-werror         turns on -Werror [default=no]
  --enable-vtable-verify  enable vtable verify [default=no]
  --enable-libstdcxx-time[=KIND]
                          use KIND for check type [default=auto]
  --enable-tls            Use thread-local storage [default=yes]
  --disable-rpath         do not hardcode runtime library paths
  --enable-linux-futex    use the Linux futex system call [default=default]
  --enable-symvers[=STYLE]
                          enables symbol versioning of the shared library
                          [default=yes]
  --enable-libstdcxx-visibility
                          enables visibility safe usage [default=yes]
  --enable-libstdcxx-dual-abi
                          support two versions of std::string [default=yes]
  --enable-libstdcxx-threads
                          enable C++11 threads support [default=auto]
  --enable-libstdcxx-filesystem-ts
                          turns on ISO/IEC TS 18822 support [default=auto]
  --enable-libstdcxx-backtrace
                          turns on libbacktrace support [default=auto]
  --enable-libstdcxx-static-eh-pool
                          use a fixed-size static buffer for allocating
                          exceptions if malloc fails
  --enable-cet            enable Intel CET in target libraries [default=auto]
  --enable-version-specific-runtime-libs
                          Specify that runtime libraries should be installed
                          in a compiler-specific directory

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-target-subdir=SUBDIR
                          configuring in a subdirectory
  --with-cross-host=HOST  configuring with a cross compiler
  --with-newlib           assume newlib as a system C library
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-libstdcxx-lock-policy={atomic,mutex,auto}
                          synchronization policy for shared_ptr reference
                          counting [default=auto]
  --with-python-dir       the location to install Python modules. This path is
                          relative starting from the prefix.
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-libiconv-type=TYPE     type of library to search for (auto/static/shared)
  --with-system-libunwind use installed libunwind
  --with-default-libstdcxx-abi
                          set the std::string ABI to use by default
  --with-libstdcxx-eh-pool-obj-count
                          the number of exceptions that can be allocated from
                          the pool if malloc fails
  --with-libstdcxx-zoneinfo
                          the location to use for tzdata
  --with-gxx-include-dir=DIR
                          installation directory for include files
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor
  CXXCPP      C++ preprocessor
  CXXFILT     Location of GNU c++filt. Defaults to the first GNU version of
              `c++filt', `gc++filt' on PATH.

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of GNU Vtable Verification Runtime Library 1.0:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory
  --enable-vtable-verify    Enable vtable verification feature
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-cet            enable Intel CET in target libraries [default=auto]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.
GNU Vtable Verification Runtime Library home page: <http://www.gnu.org/software/libvtv/>.
General help using GNU software: <http://www.gnu.org/gethelp/>.

Configuration of LTO plugin for ld 0.1:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --disable-largefile     omit support for large files
  --enable-cet            enable Intel CET in host libraries [default=auto]
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-build-libsubdir=DIR  Directory where to find libraries for build system
  --with-libiberty=PATH   specify the directory where to find libiberty
                          [../libiberty]
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of zlib 1.1.4:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-cet            enable Intel CET in target libraries [default=auto]
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-host-shared    build host code as shared libraries

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-target-subdir=SUBDIR
                          configuring in a subdirectory
  --with-cross-host=HOST  configuring with a cross compiler
  --with-system-zlib      use installed libz
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-plugins        Enable support for plugins
  --disable-largefile     omit support for large files
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-targets=TARGETS
                          alternative target configurations
  --enable-64-bit-bfd     64-bit support (on hosts with narrower word sizes)
  --enable-tui            enable full-screen terminal user interface (TUI)
  --enable-gdbtk          enable gdbtk graphical user interface (GUI)
  --enable-profiling      enable profiling of GDB
  --enable-codesign=CERT  sign gdb with 'codesign -s CERT'
  --disable-rpath         do not hardcode runtime library paths
  --enable-source-highlight
                          enable source-highlight for source listings
  --enable-threading      include support for parallel processing of data
                          (yes/no)
  --enable-werror         treat compile warnings as errors
  --enable-build-warnings enable build-time compiler warnings if gcc is used
  --enable-gdb-build-warnings
                          enable GDB specific build-time compiler warnings if
                          gcc is used
  --enable-ubsan          enable undefined behavior sanitizer (auto/yes/no)
  --enable-sim            link gdb with simulator
  --enable-libbacktrace   use libbacktrace to write a backtrace after a fatal
                          signal.
  --enable-libctf         Handle .ctf type-info sections [default=yes]
  --enable-unit-tests     Enable the inclusion of unit tests when compiling
                          GDB

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-separate-debug-dir=PATH
                          look for global separate debug info in this path
                          [LIBDIR/debug]
  --with-additional-debug-dirs=PATHs
                          colon-separated list of additional directories to
                          search for separate debug info
  --with-gdb-datadir=PATH look for global separate data files in this path
                          [DATADIR/gdb]
  --with-relocated-sources=PATH
                          automatically relocate this path for source files
  --with-auto-load-dir=PATH
                          directories from which to load auto-loaded scripts
                          [$debugdir:$datadir/auto-load]
  --with-auto-load-safe-path=PATH
                          directories safe to hold auto-loaded files
                          [--with-auto-load-dir]
  --without-auto-load-safe-path
                          do not restrict auto-loaded files locations
  --with-amd-dbgapi       support for the amd-dbgapi target (yes / no / auto)
  --with-debuginfod       Enable debuginfo lookups with debuginfod
                          (auto/yes/no)
  --with-libunwind-ia64   use libunwind frame unwinding for ia64 targets
  --with-curses           use the curses library instead of the termcap
                          library
  --with-pkgversion=PKG   Use PKG in the version string in place of "GDB"
  --with-bugurl=URL       Direct users to URL to report a bug
  --with-system-zlib      use installed libz
  --with-zstd             support zstd compressed debug sections
                          (default=auto)
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-libiconv-type=TYPE     type of library to search for (auto/static/shared)
  --with-iconv-bin=PATH   specify where to find the iconv program
  --with-system-readline  use installed readline library
  --with-jit-reader-dir=PATH
                          directory to load the JIT readers from
  --with-expat            include expat support (auto/yes/no)
  --with-libexpat-prefix[=DIR]  search for libexpat in DIR/include and DIR/lib
  --without-libexpat-prefix     don't search for libexpat in includedir and libdir
  --with-libexpat-type=TYPE     type of library to search for (auto/static/shared)
  --with-python[=PYTHON]  include python support
                          (auto/yes/no/<python-program>)
  --with-python-libdir[=DIR]
                          search for python's libraries in DIR
  --with-guile[=GUILE]    include guile support
                          (auto/yes/no/<guile-version>/<pkg-config-program>)
  --with-intel-pt         include Intel Processor Trace support (auto/yes/no)
  --with-libipt-prefix[=DIR]  search for libipt in DIR/include and DIR/lib
  --without-libipt-prefix     don't search for libipt in includedir and libdir
  --with-libipt-type=TYPE     type of library to search for (auto/static/shared)
  --with-xxhash           use libxxhash for hashing (faster) (auto/yes/no)
  --with-libxxhash-prefix[=DIR]  search for libxxhash in DIR/include and DIR/lib
  --without-libxxhash-prefix     don't search for libxxhash in includedir and libdir
  --with-libxxhash-type=TYPE     type of library to search for (auto/static/shared)
  --with-sysroot[=DIR]    search for usr/lib et al within DIR
  --with-system-gdbinit=PATH
                          automatically load a system-wide gdbinit file
  --with-system-gdbinit-dir=PATH
                          automatically load system-wide gdbinit files from
                          this directory
  --with-lzma             support lzma compression (auto/yes/no)
  --with-liblzma-prefix[=DIR]  search for liblzma in DIR/include and DIR/lib
  --without-liblzma-prefix     don't search for liblzma in includedir and libdir
  --with-liblzma-type=TYPE     type of library to search for (auto/static/shared)
  --with-tcl              directory containing tcl configuration (tclConfig.sh)
  --with-tk               directory containing tk configuration (tkConfig.sh)
  --with-x                use the X Window System
  --with-babeltrace       include babeltrace support (auto/yes/no)
  --with-libbabeltrace-prefix[=DIR]  search for libbabeltrace in DIR/include and DIR/lib
  --without-libbabeltrace-prefix     don't search for libbabeltrace in includedir and libdir
  --with-libbabeltrace-type=TYPE     type of library to search for (auto/static/shared)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor
  CXXCPP      C++ preprocessor
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  MAKEINFO    Parent configure detects if it is of sufficient version.
  MAKEINFOFLAGS
              Parameters for MAKEINFO.
  AMD_DBGAPI_CFLAGS
              C compiler flags for AMD_DBGAPI, overriding pkg-config
  AMD_DBGAPI_LIBS
              linker flags for AMD_DBGAPI, overriding pkg-config
  DEBUGINFOD_CFLAGS
              C compiler flags for DEBUGINFOD, overriding pkg-config
  DEBUGINFOD_LIBS
              linker flags for DEBUGINFOD, overriding pkg-config
  YACC        The `Yet Another Compiler Compiler' implementation to use.
              Defaults to the first program found out of: `bison -y', `byacc',
              `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  ZSTD_CFLAGS C compiler flags for ZSTD, overriding pkg-config
  ZSTD_LIBS   linker flags for ZSTD, overriding pkg-config
  GMPLIBS     How to link GMP
  GMPINC      How to find GMP include files
  XMKMF       Path to xmkmf, Makefile generator for X Window System

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-gtk            enable gdbtk graphical user interface (GUI)
  --enable-libctf         Handle .ctf type-info sections [default=yes]
  --enable-shared         build shared libraries deault=yes

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --disable-largefile     omit support for large files
  --enable-threading      include support for parallel processing of data
                          (yes/no)
  --disable-rpath         do not hardcode runtime library paths
  --enable-unit-tests     Enable the inclusion of unit tests when compiling
                          GDB
  --enable-werror         treat compile warnings as errors
  --enable-build-warnings enable build-time compiler warnings if gcc is used
  --enable-gdb-build-warnings
                          enable GDB specific build-time compiler warnings if
                          gcc is used
  --enable-inprocess-agent
                          inprocess agent

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-intel-pt         include Intel Processor Trace support (auto/yes/no)
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libipt-prefix[=DIR]  search for libipt in DIR/include and DIR/lib
  --without-libipt-prefix     don't search for libipt in includedir and libdir
  --with-libipt-type=TYPE     type of library to search for (auto/static/shared)
  --with-xxhash           use libxxhash for hashing (faster) (auto/yes/no)
  --with-libxxhash-prefix[=DIR]  search for libxxhash in DIR/include and DIR/lib
  --without-libxxhash-prefix     don't search for libxxhash in includedir and libdir
  --with-libxxhash-type=TYPE     type of library to search for (auto/static/shared)
  --with-ust=PATH       Specify prefix directory for the installed UST package
                          Equivalent to --with-ust-include=PATH/include
                          plus --with-ust-lib=PATH/lib
  --with-ust-include=PATH Specify directory for installed UST include files
  --with-ust-lib=PATH   Specify the directory for the installed UST library
  --with-pkgversion=PKG   Use PKG in the version string in place of "GDB"
  --with-bugurl=URL       Direct users to URL to report a bug
  --with-libthread-db=PATH
                          use given libthread_db directly

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of gdbsupport 1.0:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-plugins        Enable support for plugins
  --disable-largefile     omit support for large files
  --enable-threading      include support for parallel processing of data
                          (yes/no)
  --disable-rpath         do not hardcode runtime library paths
  --enable-unit-tests     Enable the inclusion of unit tests when compiling
                          GDB
  --enable-werror         treat compile warnings as errors
  --enable-build-warnings enable build-time compiler warnings if gcc is used
  --enable-gdb-build-warnings
                          enable GDB specific build-time compiler warnings if
                          gcc is used

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-intel-pt         include Intel Processor Trace support (auto/yes/no)
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libipt-prefix[=DIR]  search for libipt in DIR/include and DIR/lib
  --without-libipt-prefix     don't search for libipt in includedir and libdir
  --with-libipt-type=TYPE     type of library to search for (auto/static/shared)
  --with-xxhash           use libxxhash for hashing (faster) (auto/yes/no)
  --with-libxxhash-prefix[=DIR]  search for libxxhash in DIR/include and DIR/lib
  --without-libxxhash-prefix     don't search for libxxhash in includedir and libdir
  --with-libxxhash-type=TYPE     type of library to search for (auto/static/shared)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.


Optional Features:
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-dependency-tracking  speeds up one-time build
  --enable-dependency-tracking   do not reject slow dependency extractors
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-java          do not build Java sources
  --disable-native-java   do not compile Java to native executables
  --enable-csharp[=IMPL]  choose preferred C# implementation (pnet or mono)
  --disable-nls           do not use Native Language Support
  --enable-threads={posix|solaris|pth|win32}
                          specify multithreading API
  --disable-threads       build without multithread safety
  --disable-rpath         do not hardcode runtime library paths
  --enable-relocatable    install a package that can be moved in the filesystem
  --disable-libasprintf   do not build libasprintf
  --disable-openmp        do not use OpenMP

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-tags[=TAGS]      include additional configurations [automatic]
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libpth-prefix[=DIR]  search for libpth in DIR/include and DIR/lib
  --without-libpth-prefix     don't search for libpth in includedir and libdir
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-included-gettext use the GNU gettext library included here
  --with-libintl-prefix[=DIR]  search for libintl in DIR/include and DIR/lib
  --without-libintl-prefix     don't search for libintl in includedir and libdir
  --without-included-regex don't compile regex; this is the default on
                          systems with version 2 of the GNU C library
                          (use with caution on other system)
  --with-libexpat-prefix[=DIR]  search for libexpat in DIR/include and DIR/lib
  --without-libexpat-prefix     don't search for libexpat in includedir and libdir
  --with-lispdir          override the default lisp directory
  --without-emacs         do not use Emacs, don't install po-mode

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    C/C++/Objective C preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  F77         Fortran 77 compiler command
  FFLAGS      Fortran 77 compiler flags
  YACC        The `Yet Another C Compiler' implementation to use. Defaults to
              the first program found out of: `bison -y', `byacc', `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  GCJ         Java native code compiler command
  GCJFLAGS    Java native code compiler flags
  EMACS       the Emacs editor command
  EMACSLOADPATH
              the Emacs library search path

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.



Optional Features:
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-dependency-tracking  speeds up one-time build
  --enable-dependency-tracking   do not reject slow dependency extractors
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-tags[=TAGS]      include additional configurations [automatic]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    C/C++/Objective C preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  F77         Fortran 77 compiler command
  FFLAGS      Fortran 77 compiler flags

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.



Optional Features:
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-dependency-tracking  speeds up one-time build
  --enable-dependency-tracking   do not reject slow dependency extractors
  --disable-java          do not build Java sources
  --disable-native-java   do not compile Java to native executables
  --enable-csharp[=IMPL]  choose preferred C# implementation (pnet or mono)
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-nls           do not use Native Language Support
  --enable-threads={posix|solaris|pth|win32}
                          specify multithreading API
  --disable-threads       build without multithread safety
  --disable-rpath         do not hardcode runtime library paths
  --enable-relocatable    install a package that can be moved in the filesystem
  --disable-libasprintf   do not build libasprintf

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-tags[=TAGS]      include additional configurations [automatic]
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libpth-prefix[=DIR]  search for libpth in DIR/include and DIR/lib
  --without-libpth-prefix     don't search for libpth in includedir and libdir
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-included-gettext use the GNU gettext library included here
  --with-libintl-prefix[=DIR]  search for libintl in DIR/include and DIR/lib
  --without-libintl-prefix     don't search for libintl in includedir and libdir

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    C/C++/Objective C preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  YACC        The `Yet Another C Compiler' implementation to use. Defaults to
              the first program found out of: `bison -y', `byacc', `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  F77         Fortran 77 compiler command
  FFLAGS      Fortran 77 compiler flags

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.



Optional Features:
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-dependency-tracking  speeds up one-time build
  --enable-dependency-tracking   do not reject slow dependency extractors
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-tags[=TAGS]      include additional configurations [automatic]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    C/C++/Objective C preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor
  CXXCPP      C++ preprocessor
  F77         Fortran 77 compiler command
  FFLAGS      Fortran 77 compiler flags

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.



Optional Features:
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-dependency-tracking  speeds up one-time build
  --enable-dependency-tracking   do not reject slow dependency extractors
  --disable-java          do not build Java sources
  --disable-native-java   do not compile Java to native executables
  --enable-csharp[=IMPL]  choose preferred C# implementation (pnet or mono)
  --enable-threads={posix|solaris|pth|win32}
                          specify multithreading API
  --disable-threads       build without multithread safety
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-nls           do not use Native Language Support
  --disable-rpath         do not hardcode runtime library paths
  --disable-openmp        do not use OpenMP
  --enable-relocatable    install a package that can be moved in the filesystem

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-tags[=TAGS]      include additional configurations [automatic]
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libpth-prefix[=DIR]  search for libpth in DIR/include and DIR/lib
  --without-libpth-prefix     don't search for libpth in includedir and libdir
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-included-gettext use the GNU gettext library included here
  --with-libintl-prefix[=DIR]  search for libintl in DIR/include and DIR/lib
  --without-libintl-prefix     don't search for libintl in includedir and libdir
  --without-included-regex don't compile regex; this is the default on
                          systems with version 2 of the GNU C library
                          (use with caution on other system)
  --with-libexpat-prefix[=DIR]  search for libexpat in DIR/include and DIR/lib
  --without-libexpat-prefix     don't search for libexpat in includedir and libdir
  --with-lispdir          override the default lisp directory
  --without-emacs         do not use Emacs, don't install po-mode

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    C/C++/Objective C preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  YACC        The `Yet Another C Compiler' implementation to use. Defaults to
              the first program found out of: `bison -y', `byacc', `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  GCJ         Java native code compiler command
  GCJFLAGS    Java native code compiler flags
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  F77         Fortran 77 compiler command
  FFLAGS      Fortran 77 compiler flags
  EMACS       the Emacs editor command
  EMACSLOADPATH
              the Emacs library search path

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.



Optional Features:
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-nls           do not use Native Language Support


Configuration of libgnu UNUSED-VERSION:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-plugins        Enable support for plugins
  --disable-largefile     omit support for large files
  --disable-year2038      omit support for timestamps past the year 2038
  --enable-threads={isoc|posix|isoc+posix|windows}
                          specify multithreading API
  --disable-threads       build without multithread safety
  --enable-cross-guesses={conservative|risky}
                          specify policy for cross-compilation guesses
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of gold 0.1:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-gold[=ARG]     build gold [ARG={default,yes,no}]
  --enable-plugins        Enable support for plugins
  --enable-relro          enable -z relro in ELF linker by default
  --enable-targets        alternative target configurations
  --enable-default-hash-style={sysv,gnu,both}
                          use this default hash style
  --disable-nls           do not use Native Language Support
  --enable-werror         treat compile warnings as errors
  --enable-build-warnings enable build-time compiler warnings
  --enable-threads[=ARG]  multi-threaded linking [ARG={auto,yes,no}]
  --enable-jansson        enable jansson [default=no]
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-sysroot=DIR    search for usr/lib et al within DIR
  --with-lib-path=dir1:dir2...  set default LIB_PATH
  --with-gold-ldflags=FLAGS  additional link flags for gold
  --with-gold-ldadd=LIBS     additional libraries for gold
  --with-system-zlib      use installed libz
  --with-zstd             support zstd compressed debug sections
                          (default=auto)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  YACC        The `Yet Another Compiler Compiler' implementation to use.
              Defaults to the first program found out of: `bison -y', `byacc',
              `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  ZSTD_CFLAGS C compiler flags for ZSTD, overriding pkg-config
  ZSTD_LIBS   linker flags for ZSTD, overriding pkg-config
  JANSSON_CFLAGS
              C compiler flags for JANSSON, overriding pkg-config
  JANSSON_LIBS
              linker flags for JANSSON, overriding pkg-config
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of gprof 2.41.50:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-plugins        Enable support for plugins
  --disable-largefile     omit support for large files
  --disable-nls           do not use Native Language Support
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-werror         treat compile warnings as errors
  --enable-build-warnings enable build-time compiler warnings

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of gprofng 2.41.50:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-shared[=PKGS]  build shared libraries [default=no]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-werror-always  enable -Werror despite compiler version
  --disable-gprofng-tools do not build gprofng/src directory
  --enable-gprofng-debug  Enable debugging output [default=no]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-jdk=PATH         specify prefix directory for installed JDK.
  --with-system-zlib      use installed libz

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of gprofng 2.41.50:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-nls           do not use Native Language Support
  --disable-rpath         do not hardcode runtime library paths
  --enable-maintainer-mode enable rules only needed by maintainers
  --enable-host-shared    build host code as shared libraries
  --enable-host-pie       build host code as PIE

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-libiconv-type=TYPE     type of library to search for (auto/static/shared)
  --with-included-gettext use the GNU gettext library included here
  --with-libintl-prefix[=DIR]  search for libintl in DIR/include and DIR/lib
  --without-libintl-prefix     don't search for libintl in includedir and libdir
  --with-libintl-type=TYPE     type of library to search for (auto/static/shared)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of ld 2.41.50:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-plugins        Enable support for plugins
  --disable-largefile     omit support for large files
  --enable-checking       enable run-time checks
  --enable-targets        alternative target configurations
  --enable-64-bit-bfd     64-bit support (on hosts with narrower word sizes)
  --enable-gold[=ARG]     build gold [ARG={default,yes,no}]
  --enable-got=<type>     GOT handling scheme (target, single, negative,
                          multigot)
  --enable-compressed-debug-sections={all,ld,none}
                          compress debug sections by default]
  --enable-default-compressed-debug-sections-algorithm={zlib,zstd}
                          Default compression algorithm for
                          --enable-compressed-debug-sections.
  --enable-new-dtags      set DT_RUNPATH instead of DT_RPATH by default]
  --enable-relro          enable -z relro in ELF linker by default
  --enable-textrel-check=[yes|no|warning|error]
                          enable DT_TEXTREL check in ELF linker
  --enable-separate-code  enable -z separate-code in ELF linker by default
  --enable-warn-execstack enable warnings when creating an executable stack
  --enable-warn-rwx-segments
                          enable warnings when creating segments with RWX
                          permissions
  --enable-default-execstack
                          create an executable stack if an input file is
                          missing a .note.GNU-stack section
  --enable-error-handling-script
                          enable/disable support for the
                          --error-handling-script option
  --enable-default-hash-style={sysv,gnu,both}
                          use this default hash style
  --disable-initfini-array do not use .init_array/.fini_array sections
  --enable-libctf         Handle .ctf type-info sections [default=yes]
  --enable-jansson        enable jansson [default=no]
  --enable-werror         treat compile warnings as errors
  --enable-build-warnings enable build-time compiler warnings
  --disable-nls           do not use Native Language Support

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-lib-path=dir1:dir2...  set default LIB_PATH
  --with-sysroot=DIR Search for usr/lib et al within DIR.
  --with-system-zlib      use installed libz
  --with-zstd             support zstd compressed debug sections
                          (default=auto)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  CXXCPP      C++ preprocessor
  JANSSON_CFLAGS
              C compiler flags for JANSSON, overriding pkg-config
  JANSSON_LIBS
              linker flags for JANSSON, overriding pkg-config
  YACC        The `Yet Another Compiler Compiler' implementation to use.
              Defaults to the first program found out of: `bison -y', `byacc',
              `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  ZSTD_CFLAGS C compiler flags for ZSTD, overriding pkg-config
  ZSTD_LIBS   linker flags for ZSTD, overriding pkg-config

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of package-unused version-unused:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-largefile     omit support for large files
  --enable-cet            enable Intel CET in target libraries [default=auto]
  --enable-host-shared    build host code as shared libraries
  --enable-cet            enable Intel CET in host libraries [default=auto]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-target-subdir=SUBDIR      Configuring in a subdirectory for target
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-system-libunwind use installed libunwind

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  OBJCOPY     location of objcopy
  DSYMUTIL    location of dsymutil
  NM          location of nm

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of libctf 1.2.0:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-shared[=PKGS]  build shared libraries [default=no]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-largefile     omit support for large files
  --enable-werror-always  enable -Werror despite compiler version
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-install-libbfd controls installation of libbfd and related headers
  --enable-libctf-hash-debugging
                          Enable expensive debugging of CTF deduplication type
                          hashing [default=no]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-system-zlib      use installed libz

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of libdecnumber  :

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-werror-always  enable -Werror despite compiler version
  --enable-maintainer-mode enable rules only needed by maintainers
  --enable-decimal-float={no,yes,bid,dpd}
			enable decimal float extension to C.  Selecting 'bid'
			or 'dpd' choses which decimal floating point format
			to use
  --enable-host-shared    build host code as shared libraries
  --enable-host-pie       build host code as PIE

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <gcc-bugs@gcc.gnu.org>.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-maintainer-mode
                          enable make rules and dependencies not useful
                          (and sometimes confusing) to the casual installer
  --enable-multilib       build many library versions (default)
  --enable-install-libiberty       Install headers and library for end users
  --disable-largefile     omit support for large files
  --enable-cet            enable Intel CET in host libraries [default=auto]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-target-subdir=SUBDIR      Configuring in a subdirectory for target
  --with-build-subdir=SUBDIR       Configuring in a subdirectory for build
  --with-cross-host=HOST           Configuring with a cross compiler
  --with-newlib                    Configuring with newlib

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of libsframe BFD_VERSION:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-shared[=PKGS]  build shared libraries [default=no]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-largefile     omit support for large files
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-install-libbfd controls installation of libbfd and related headers

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of libtool 2.2.6b:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-ltdl-install  do not install libltdl
  --disable-dependency-tracking  speeds up one-time build
  --enable-dependency-tracking   do not reject slow dependency extractors
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-ltdl-install   install libltdl

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    C/C++/Objective C preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  F77         Fortran 77 compiler command
  FFLAGS      Fortran 77 compiler flags
  FC          Fortran compiler command
  FCFLAGS     Fortran compiler flags

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <bug-libtool@gnu.org>.

Configuration of opcodes 2.41.50:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-shared[=PKGS]  build shared libraries [default=no]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-checking       enable run-time checks
  --enable-targets        alternative target configurations
  --enable-werror         treat compile warnings as errors
  --enable-build-warnings enable build-time compiler warnings
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-install-libbfd controls installation of libbfd and related headers
  --disable-nls           do not use Native Language Support
  --enable-64-bit-bfd     64-bit support (on hosts with narrower word sizes)
  --enable-cgen-maint=dir    build cgen generated files

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of readline UNUSED-VERSION:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer

Report bugs to the package provider.

Configuration of readline 8.1:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multibyte      enable multibyte characters if OS supports them
  --enable-static         build static libraries [[default=YES]]
  --disable-install-examples
                          don't install examples [[default=install]]
  --disable-bracketed-paste-default
                          disable bracketed paste by default
                          [[default=enable]]
  --disable-largefile     omit support for large files

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-curses           use the curses library instead of the termcap
                          library

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <bug-readline@gnu.org>.

Configuration of sim 0:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-sim            Enable the GNU simulator
  --enable-example-sims   enable example GNU simulators
  --enable-targets        alternative target configurations
  --enable-sim-alignment=align
                          Specify strict, nonstrict or forced alignment of
                          memory accesses
  --enable-sim-assert     Specify whether to perform random assertions
  --enable-cgen-maint=DIR build cgen generated files
  --enable-sim-debug=opts Enable debugging flags (for developers of the sim
                          itself)
  --enable-sim-endian=endian
                          Specify target byte endian orientation
  --enable-sim-environment=environment
                          Specify mixed, user, virtual or operating
                          environment
  --enable-sim-hardware   Whether to enable hardware/device simulation
  --enable-sim-inline=inlines
                          Specify which functions should be inlined
  --enable-sim-profile=opts
                          Enable profiling flags
  --enable-sim-reserved-bits
                          Specify whether to check reserved bits in
                          instruction
  --enable-sim-scache=size
                          Specify simulator execution cache size
  --enable-sim-smp=n      Specify number of processors to configure for
                          (default 1)
  --enable-sim-stdio      Specify whether to use stdio for console
                          input/output
  --enable-sim-trace=opts Enable tracing of simulated programs
  --enable-werror         treat compile warnings as errors
  --enable-build-warnings enable build-time compiler warnings if gcc is used
  --enable-sim-build-warnings
                          enable SIM specific build-time compiler warnings if
                          gcc is used
  --enable-sim-frv-trapdump
                          Make unknown traps dump the registers
  --disable-sim-rx-cycle-accurate
                          Disable cycle accurate simulation (faster runtime)

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pkgversion=PKG   Use PKG in the version string in place of "SIM"
  --with-bugurl=URL       Direct users to URL to report a bug
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  SDL_CFLAGS  C compiler flags for SDL, overriding pkg-config
  SDL_LIBS    linker flags for SDL, overriding pkg-config
  AS_FOR_TARGET_AARCH64
              Assembler for aarch64 tests
  LD_FOR_TARGET_AARCH64
              Linker for aarch64 tests
  CC_FOR_TARGET_AARCH64
              C compiler for aarch64 tests
  AS_FOR_TARGET_ARM
              Assembler for arm tests
  LD_FOR_TARGET_ARM
              Linker for arm tests
  CC_FOR_TARGET_ARM
              C compiler for arm tests
  AS_FOR_TARGET_AVR
              Assembler for avr tests
  LD_FOR_TARGET_AVR
              Linker for avr tests
  CC_FOR_TARGET_AVR
              C compiler for avr tests
  AS_FOR_TARGET_BFIN
              Assembler for bfin tests
  LD_FOR_TARGET_BFIN
              Linker for bfin tests
  CC_FOR_TARGET_BFIN
              C compiler for bfin tests
  AS_FOR_TARGET_BPF
              Assembler for bpf tests
  LD_FOR_TARGET_BPF
              Linker for bpf tests
  CC_FOR_TARGET_BPF
              C compiler for bpf tests
  AS_FOR_TARGET_CR16
              Assembler for cr16 tests
  LD_FOR_TARGET_CR16
              Linker for cr16 tests
  CC_FOR_TARGET_CR16
              C compiler for cr16 tests
  AS_FOR_TARGET_CRIS
              Assembler for cris tests
  LD_FOR_TARGET_CRIS
              Linker for cris tests
  CC_FOR_TARGET_CRIS
              C compiler for cris tests
  AS_FOR_TARGET_D10V
              Assembler for d10v tests
  LD_FOR_TARGET_D10V
              Linker for d10v tests
  CC_FOR_TARGET_D10V
              C compiler for d10v tests
  AS_FOR_TARGET_FRV
              Assembler for frv tests
  LD_FOR_TARGET_FRV
              Linker for frv tests
  CC_FOR_TARGET_FRV
              C compiler for frv tests
  AS_FOR_TARGET_FT32
              Assembler for ft32 tests
  LD_FOR_TARGET_FT32
              Linker for ft32 tests
  CC_FOR_TARGET_FT32
              C compiler for ft32 tests
  AS_FOR_TARGET_H8300
              Assembler for h8300 tests
  LD_FOR_TARGET_H8300
              Linker for h8300 tests
  CC_FOR_TARGET_H8300
              C compiler for h8300 tests
  AS_FOR_TARGET_IQ2000
              Assembler for iq2000 tests
  LD_FOR_TARGET_IQ2000
              Linker for iq2000 tests
  CC_FOR_TARGET_IQ2000
              C compiler for iq2000 tests
  AS_FOR_TARGET_LM32
              Assembler for lm32 tests
  LD_FOR_TARGET_LM32
              Linker for lm32 tests
  CC_FOR_TARGET_LM32
              C compiler for lm32 tests
  AS_FOR_TARGET_M32C
              Assembler for m32c tests
  LD_FOR_TARGET_M32C
              Linker for m32c tests
  CC_FOR_TARGET_M32C
              C compiler for m32c tests
  AS_FOR_TARGET_M32R
              Assembler for m32r tests
  LD_FOR_TARGET_M32R
              Linker for m32r tests
  CC_FOR_TARGET_M32R
              C compiler for m32r tests
  AS_FOR_TARGET_M68HC11
              Assembler for m68hc11 tests
  LD_FOR_TARGET_M68HC11
              Linker for m68hc11 tests
  CC_FOR_TARGET_M68HC11
              C compiler for m68hc11 tests
  AS_FOR_TARGET_MCORE
              Assembler for mcore tests
  LD_FOR_TARGET_MCORE
              Linker for mcore tests
  CC_FOR_TARGET_MCORE
              C compiler for mcore tests
  AS_FOR_TARGET_MICROBLAZE
              Assembler for microblaze tests
  LD_FOR_TARGET_MICROBLAZE
              Linker for microblaze tests
  CC_FOR_TARGET_MICROBLAZE
              C compiler for microblaze tests
  AS_FOR_TARGET_MIPS
              Assembler for mips tests
  LD_FOR_TARGET_MIPS
              Linker for mips tests
  CC_FOR_TARGET_MIPS
              C compiler for mips tests
  AS_FOR_TARGET_MN10300
              Assembler for mn10300 tests
  LD_FOR_TARGET_MN10300
              Linker for mn10300 tests
  CC_FOR_TARGET_MN10300
              C compiler for mn10300 tests
  AS_FOR_TARGET_MOXIE
              Assembler for moxie tests
  LD_FOR_TARGET_MOXIE
              Linker for moxie tests
  CC_FOR_TARGET_MOXIE
              C compiler for moxie tests
  AS_FOR_TARGET_MSP430
              Assembler for msp430 tests
  LD_FOR_TARGET_MSP430
              Linker for msp430 tests
  CC_FOR_TARGET_MSP430
              C compiler for msp430 tests
  AS_FOR_TARGET_OR1K
              Assembler for or1k tests
  LD_FOR_TARGET_OR1K
              Linker for or1k tests
  CC_FOR_TARGET_OR1K
              C compiler for or1k tests
  AS_FOR_TARGET_PPC
              Assembler for ppc tests
  LD_FOR_TARGET_PPC
              Linker for ppc tests
  CC_FOR_TARGET_PPC
              C compiler for ppc tests
  AS_FOR_TARGET_PRU
              Assembler for pru tests
  LD_FOR_TARGET_PRU
              Linker for pru tests
  CC_FOR_TARGET_PRU
              C compiler for pru tests
  AS_FOR_TARGET_RISCV
              Assembler for riscv tests
  LD_FOR_TARGET_RISCV
              Linker for riscv tests
  CC_FOR_TARGET_RISCV
              C compiler for riscv tests
  AS_FOR_TARGET_RL78
              Assembler for rl78 tests
  LD_FOR_TARGET_RL78
              Linker for rl78 tests
  CC_FOR_TARGET_RL78
              C compiler for rl78 tests
  AS_FOR_TARGET_RX
              Assembler for rx tests
  LD_FOR_TARGET_RX
              Linker for rx tests
  CC_FOR_TARGET_RX
              C compiler for rx tests
  AS_FOR_TARGET_SH
              Assembler for sh tests
  LD_FOR_TARGET_SH
              Linker for sh tests
  CC_FOR_TARGET_SH
              C compiler for sh tests
  AS_FOR_TARGET_ERC32
              Assembler for erc32 tests
  LD_FOR_TARGET_ERC32
              Linker for erc32 tests
  CC_FOR_TARGET_ERC32
              C compiler for erc32 tests
  AS_FOR_TARGET_V850
              Assembler for v850 tests
  LD_FOR_TARGET_V850
              Linker for v850 tests
  CC_FOR_TARGET_V850
              C compiler for v850 tests
  AS_FOR_TARGET_EXAMPLE_SYNACOR
              Assembler for example-synacor tests
  LD_FOR_TARGET_EXAMPLE_SYNACOR
              Linker for example-synacor tests
  CC_FOR_TARGET_EXAMPLE_SYNACOR
              C compiler for example-synacor tests

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <https://sourceware.org/bugzilla/enter_bug.cgi?product=gdb&component=sim>.
sim home page: <https://sourceware.org/gdb/wiki/Sim/>.


Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-sim-bitsize=n		Specify target bitsize (32 or 64).
  --enable-sim-decode-mechanism=which		Specify the instruction decode mechanism.
  --enable-sim-default-model=which	Specify default PowerPC to model.
  --enable-sim-duplicate		Expand (duplicate) semantic functions.
  --enable-sim-filter=rule		Specify filter rules.
  --enable-sim-float			Specify whether the target has hard, soft, altivec or e500 floating point.
  --enable-sim-hardware=list		Specify the hardware to be included in the build.
  --enable-sim-icache=size		Specify instruction-decode cache size and type.
  --enable-sim-jump		Jump between semantic code (instead of call/return).
  --enable-sim-line-nr=opts		Generate extra CPP code that references source rather than generated code
  --enable-sim-model=which		Specify PowerPC to model.
  --enable-sim-model-issue		Specify whether to simulate model specific actions
  --enable-sim-monitor=mon		Specify whether to enable monitoring events.
  --enable-sim-opcode=which		Override default opcode lookup.
  --enable-sim-smp=n			Specify number of processors to configure for.
  --enable-sim-switch			Use a switch instead of a table for instruction call.
  --enable-sim-timebase			Specify whether the PPC timebase is supported.
  --enable-sim-xor-endian=n		Specify number bytes involved in PowerPC XOR bi-endian mode (default 8).

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

Configuration of zlib 1.1.4:

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-host-shared    build host code as shared libraries
  --enable-host-pie       build host code as PIE

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-target-subdir=SUBDIR
                          configuring in a subdirectory
  --with-cross-host=HOST  configuring with a cross compiler
  --with-system-zlib      use installed libz
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.
